/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.util.List;
import java.util.Set;
import javax.swing.table.DefaultTableModel;
import modelo.Prestamo;
import modelo.Recibo;
import controlador.Controlador;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import javax.swing.JOptionPane;
import modelo.FormaPago;

public class main extends javax.swing.JFrame {

    private Controlador controlDatos = new Controlador();
    private int indicePrestamo;
    public main() {
        initComponents();
        
        DefaultTableModel modeloTablaPrestamos = (DefaultTableModel) tablaPrestamos.getModel();
        tablaPrestamos.setModel(modeloTablaPrestamos);
        rellenarPrestamos();
        rellenarComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        botonAniadir = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        botonBorrar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        botonActualizar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        campoNumPrestamo = new javax.swing.JTextField();
        listaFormaPago = new javax.swing.JComboBox<>();
        botonPagar = new javax.swing.JButton();
        campoImporte = new javax.swing.JFormattedTextField();
        campoFecha = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPrestamos = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaRecibo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botonAniadir.setText("Añadir");
        botonAniadir.setFocusable(false);
        botonAniadir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAniadir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAniadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAniadirActionPerformed(evt);
            }
        });
        jToolBar1.add(botonAniadir);
        jToolBar1.add(jSeparator1);

        botonBorrar.setText("Borrar");
        botonBorrar.setFocusable(false);
        botonBorrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonBorrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarActionPerformed(evt);
            }
        });
        jToolBar1.add(botonBorrar);
        jToolBar1.add(jSeparator2);

        botonActualizar.setText("Actualizar");
        botonActualizar.setFocusable(false);
        botonActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonActualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });
        jToolBar1.add(botonActualizar);

        jLabel1.setText("Nº Prestamo");

        jLabel2.setText("Fecha");

        jLabel3.setText("Importe");

        jLabel4.setText("Forma de pago");

        botonPagar.setText("Pagar");
        botonPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPagarActionPerformed(evt);
            }
        });

        campoImporte.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel5.setText("YYYY-MM-DD");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(botonPagar))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(77, 77, 77)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(campoNumPrestamo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(listaFormaPago, javax.swing.GroupLayout.Alignment.TRAILING, 0, 223, Short.MAX_VALUE)
                            .addComponent(campoImporte, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(campoFecha))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campoNumPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jLabel5)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(campoFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(campoImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(listaFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonPagar, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        tablaPrestamos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº Prestamo", "Fecha", "Importe", "Importe Pagado", "F. de pago"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPrestamos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPrestamosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaPrestamos);
        if (tablaPrestamos.getColumnModel().getColumnCount() > 0) {
            tablaPrestamos.getColumnModel().getColumn(0).setResizable(false);
            tablaPrestamos.getColumnModel().getColumn(1).setResizable(false);
            tablaPrestamos.getColumnModel().getColumn(2).setResizable(false);
            tablaPrestamos.getColumnModel().getColumn(3).setResizable(false);
            tablaPrestamos.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
        );

        tablaRecibo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº Recibo", "Fecha", "Importe", "Fecha pago"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaRecibo);
        if (tablaRecibo.getColumnModel().getColumnCount() > 0) {
            tablaRecibo.getColumnModel().getColumn(0).setResizable(false);
            tablaRecibo.getColumnModel().getColumn(1).setResizable(false);
            tablaRecibo.getColumnModel().getColumn(2).setResizable(false);
            tablaRecibo.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    
                                    CAPTURA DE EVENTOS
    
    */
    
    private void tablaPrestamosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPrestamosMouseClicked
        indicePrestamo = tablaPrestamos.getSelectedRow();
        rellenarRecibos(); //Rellena la tabla de recibos
        rellenarTextos(); //Rellena los campos de texto y el comboBox
    }//GEN-LAST:event_tablaPrestamosMouseClicked

    private void botonAniadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAniadirActionPerformed
        aniadirRegistro();
    }//GEN-LAST:event_botonAniadirActionPerformed

    private void botonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarActionPerformed
        borrarRegistroSelecc();
    }//GEN-LAST:event_botonBorrarActionPerformed

    private void botonPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPagarActionPerformed
        pagarRecibo();
    }//GEN-LAST:event_botonPagarActionPerformed

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        actualizarRegistro();
    }//GEN-LAST:event_botonActualizarActionPerformed

   /*
    
                    CLASE MAIN
    
    */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
        
        
    }
    
    /*
    
                                                METODOS 
    
    */
    
    
    //                                          Campos de datos
    
    private void rellenarComboBox(){ //Rellena la lista de formas de pago del formulario izquierdo.
        List<FormaPago> lista = controlDatos.listarComboBox(); //Sacamos una lista con las formas de pago que existen en la tabla FormasPago
        lista.forEach((fp) -> {
            listaFormaPago.addItem(fp);
        });
    }
    
    private void rellenarTextos(){                                                    //Se rellenan los campos de texto con los datos de la tabla seleccionada
        DefaultTableModel modeloPrestamos = (DefaultTableModel) tablaPrestamos.getModel();
        campoNumPrestamo.setText(modeloPrestamos.getValueAt(indicePrestamo, 0).toString()); 
        campoFecha.setText(modeloPrestamos.getValueAt(indicePrestamo, 1).toString());
        campoImporte.setText(modeloPrestamos.getValueAt(indicePrestamo, 2).toString());
            //Seleccionar item del comboBox
        int lonCombo = listaFormaPago.getItemCount();                               //Se saca la cantidad de items que tiene la lista
        String metodo = (tablaPrestamos.getValueAt(indicePrestamo, 4)).toString();  //Se selecciona el metodo de pago presente en el registro de la tabla de prestamos
        for(int i = 0; i<lonCombo; i++){                                            
            if(listaFormaPago.getItemAt(i).toString().equals(metodo)){              //Se busca el indice del item de la lista que coincida con el metodo de pago del registro de la tabla prestamos
                listaFormaPago.setSelectedIndex(i);                                 //Se selecciona el registro
            }
        }
    }
    
    //                                      Prestamos
    
    private void rellenarPrestamos(){
            borrarTablaPrestamos();
            DefaultTableModel modelo = (DefaultTableModel) tablaPrestamos.getModel();
            List<Prestamo> prest = controlDatos.recibirPrestamos();                  //Devuelve los prestamos de la BD con sus recibos
                                                                                     //Por cada registro añadimos una fila
            prest.forEach((pr) -> {
                modelo.addRow(new Object[]{pr, pr.getFecha(), pr.getImporte(), pr.getImportePagado(), pr.getFormaPago()}); 
            });
        }
    
    private void borrarTablaPrestamos(){                                            //Borra los registros de la tabla de prestamos
        DefaultTableModel modeloTablaPrestamos = (DefaultTableModel) tablaPrestamos.getModel();
        while(tablaPrestamos.getRowCount() != 0){                                   
            modeloTablaPrestamos.removeRow(0);
        }
    }
    
    private void comprobarTodoPagado(){ //Este metodo arregla los prestamos como 1000€ dividido en 3 meses (333,33 periodico) y lo arregla poniendo 1000 al importe pagado.
        Prestamo prestamo = (Prestamo) tablaPrestamos.getValueAt(indicePrestamo, 0); //Cogemos el prestamo seleccionado
        if(controlDatos.comprobarTodoPagado(prestamo)){ //Si devuelve true es porque no hay recibos pagados
            prestamo.setImportePagado(prestamo.getImporte());
            controlDatos.actualizarPrestamo(prestamo);
        } 
    }
    
    //                                      Recibos
    
    private void rellenarRecibos(){                                                   //Rellena los recibos relacionados al prestamo seleccionado
        borrarTablaRecibos();                                                         //Se borra primero los registros que ya hay para que no se añadan a los nuevos
        int indicePrestamos = tablaPrestamos.getSelectedRow(); 
        Prestamo prestamo = (Prestamo) tablaPrestamos.getValueAt(indicePrestamos, 0);
        Set <Recibo> recibos = prestamo.getRecibos();                                 //Cogemos los recibos del prestamo seleccionado
        
        DefaultTableModel modeloRecibos = (DefaultTableModel) tablaRecibo.getModel(); //Cogemos el modelo de la tabla de recibos
        
        List<Recibo> recibosOrdenados = new ArrayList<>(recibos);
        recibosOrdenados.sort(Comparator.comparing(Recibo::getFecha));                //Ordenamos los registros segun la fecha
        
        recibosOrdenados.forEach((re) -> {                                            //Por cada recibo añadimos un registro a la tabla de recibos
            modeloRecibos.addRow(new Object[]{re, re.getFecha(), re.getImporte(), re.getFechaPagado()} );
        });
    }
    
    private void borrarTablaRecibos(){                                              //Borra los registros de la tabla de recibos
        DefaultTableModel modeloTablaRecibos = (DefaultTableModel) tablaRecibo.getModel();
        while(tablaRecibo.getRowCount() != 0){
            modeloTablaRecibos.removeRow(0);
        }
    }
    
    //                                      TRATAMIENTO DE DATOS
    
    private void aniadirRegistro(){
        try {
            if(campoFecha.getText().length() != 0 &&
                    campoImporte.getText().length() != 0 && 
                    campoNumPrestamo.getText().length() != 0){  
                                                                                    //Si los campos no estan vacios, se cogen los datos de los campos de texto y de la lista
                Prestamo prestamoAniadir = new Prestamo();                               
                prestamoAniadir.setNPrestamo(new BigDecimal(campoNumPrestamo.getText()));
                prestamoAniadir.setImporte(new BigDecimal(campoImporte.getText()));
                SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
                Date fechaPrestamo = formato.parse(campoFecha.getText());
                prestamoAniadir.setFecha(fechaPrestamo);
                prestamoAniadir.setFormaPago((FormaPago) listaFormaPago.getSelectedItem());
                prestamoAniadir.setImportePagado(BigDecimal.valueOf(0));
                
                int yaExistia = controlDatos.generarRegistro(prestamoAniadir);      //Se comprueba que el registro no existe, y si ya existe se pregunta si se quiere sobreescribir
            switch(yaExistia){                                                      //Duelve 0 si no existe, 1 si existe y se va a actualizar, y 2 si se cancela
                case 0: JOptionPane.showMessageDialog(null, "Prestamo añadido.");
                        break;
                case 1: 
                    int seleccion = JOptionPane.showConfirmDialog(
                            null, "El ID del prestamo ya existe. ¿Quizás prefieras actualizar el registro existente?",
                            "Prestamo ya existente",
                            JOptionPane.YES_NO_OPTION);
                    if(seleccion==JOptionPane.YES_OPTION){
                        controlDatos.actualizarPrestamo(prestamoAniadir);
                    }
                    if(seleccion==JOptionPane.NO_OPTION){
                         JOptionPane.showMessageDialog(null, "Cancelado");
                    }
                    JOptionPane.showMessageDialog(null, "Prestamo actualizado"); 
                        break;
            }
            }
            else{
                JOptionPane.showMessageDialog(null, "Comprueba que no haya campos vacíos.");
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(null, "Formato de fecha incorrecto" + ex);
        } catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Introduce correctamente los datos.");
        }
        finally{
            rellenarPrestamos();
        }
    }
    
    private void borrarRegistroSelecc(){
        if(tablaPrestamos.getSelectedRow() != -1){
            Prestamo prestamoABorrar = (Prestamo) tablaPrestamos.getValueAt(indicePrestamo, 0);
            if(prestamoABorrar.getImportePagado().intValue() == 0){                         //Si no hay ningun importe pagado se puede borrar
                int seleccion = JOptionPane.showConfirmDialog(
                            null, "¿Borrar prestamo " + prestamoABorrar.toString()+" con fecha " + prestamoABorrar.getFecha().toString() + "?",
                            "Prestamo ya existente",
                            JOptionPane.YES_NO_OPTION);
                if(seleccion == JOptionPane.YES_OPTION){
                controlDatos.borrarRegistro(prestamoABorrar);                               //Este metodo borra el registro de la tabla de la base de datos
                rellenarPrestamos();                                                        //Se rellena la tabla de prestamos otra vez.
                }
                if(seleccion == JOptionPane.NO_OPTION){
                    JOptionPane.showMessageDialog(null, "Cancelando");
                }
            }
            else{                                                                           //Si hay alguno no se puede borrar
                JOptionPane.showMessageDialog(null, "Existe al menos un recibo pagado. No se puede borrar");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Selecciona un prestamo.");
        }
        
    }
    
    private void actualizarRegistro(){                                                  //Se modifica un prestamo con los datos de los campos de la izquierda
        if(campoFecha.getText().length() != 0 && campoImporte.getText().length() != 0 && campoNumPrestamo.getText().length() != 0){ //Se comprueba que los campos no esten vacios
            try {
                
                Prestamo prestamoActualizar = (Prestamo) tablaPrestamos.getModel().getValueAt(indicePrestamo, 0); //Recibimos el objeto de la primera columna, que contiene todos los datos
                if(prestamoActualizar.getImportePagado().intValue() != 0){              //Si tiene un recibo pagado no se puede modificar
                    JOptionPane.showMessageDialog(null, "No se puede actualizar un prestamo con recibos pagados.");
                }
                else{                                                                   //Se actualiza la fecha, el importe y la forma de pago
                    Date fechaPrestamo=new SimpleDateFormat("yyyy-MM-dd").parse(campoFecha.getText());
                    prestamoActualizar.setFecha(fechaPrestamo);
                    prestamoActualizar.setImporte(new BigDecimal(campoImporte.getText()));
                    prestamoActualizar.setFormaPago((FormaPago) listaFormaPago.getSelectedItem());

                    controlDatos.actualizarPrestamo(prestamoActualizar);                //Se llama al metodo del controlador que actualiza y se le pasa el prestamo ya modificado

                    rellenarPrestamos();                                                //Se rellena la tabla de prestamos
                }
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Fecha incorrecta" + ex);
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Comprueba los campos");
        }
    }
    
    private void pagarRecibo(){                                                         //Se activa al pulsar el boton de pagar.
        int indiceRecibo = tablaRecibo.getSelectedRow();                                //Se guarda el indice del registro seleccionado
        if(indiceRecibo != -1){                                                         //Si el indice es -1 es porque no hay ninguno seleccionado
            DefaultTableModel modeloRecibos = (DefaultTableModel) tablaRecibo.getModel();
            Recibo reciboAPagar = (Recibo) modeloRecibos.getValueAt(indiceRecibo, 0);
            if(reciboAPagar.getFechaPagado() == null){                                  //Si la fecha de pago es null es porque no se ha pagado 
                controlDatos.pagarRecibo(reciboAPagar);                                 //Se paga el recibo
                controlDatos.sumarImporte(reciboAPagar);                                //Se suma al ya existente
                comprobarTodoPagado();                                                  //Se comprueba si todo está pagado para saber si redondear
                rellenarPrestamos();                                                    //Se rellena la tabla de prestamos
                tablaPrestamos.setRowSelectionInterval(indicePrestamo, indicePrestamo); //Se selecciona la fila de la tabla con el indice que hemos guardado antes
                rellenarRecibos();                                                      //Se llena la tabla de recibos
            }
            else{
                JOptionPane.showMessageDialog(null, "Recibo ya pagado.");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Selecciona un recibo.");
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonAniadir;
    private javax.swing.JButton botonBorrar;
    private javax.swing.JButton botonPagar;
    private javax.swing.JTextField campoFecha;
    private javax.swing.JFormattedTextField campoImporte;
    private javax.swing.JTextField campoNumPrestamo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox<FormaPago> listaFormaPago;
    private javax.swing.JTable tablaPrestamos;
    private javax.swing.JTable tablaRecibo;
    // End of variables declaration//GEN-END:variables

}